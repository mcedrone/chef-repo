#!/bin/bash

# Takes a cookbook from the site-cookbooks directory and creates a git
# repository containing it adjacent to this repository.  This would be
# the first step to moving a site-cookbook into its own git repository

#Detect the path that has this script in it
DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
REPO="$( cd -P "$DIR/.." && pwd )"

#Exactly one argument
if [ $# -ne 1 ]
then
  echo "Usage: `basename $0` {cookbook}"
  exit 65
fi

#With no slashes
if [[ "$1" =~ "/" ]]
then
  echo "Usage `basename $0` {cookbook} (no slashes)"
  exit 65
fi

#Does the cookbook exist?
if [ ! -d "$REPO/site-cookbooks/$1" ]
then
  echo "Cannot find site-cookbook named $1"
  exit 1
fi

#Are we on master?
if [[ ! "$( cd $REPO && git status -sb | head -1 )" == "## master"* ]]
then
  echo "Not currently on master branch"
  exit 1
fi

#Are there uncommited changes to the cookbook?
if [[ $( cd $REPO && git status --porcelain | grep -q "site-cookbooks/$1" ) ]]
then
  echo "There are un-commited changes to $1"
  exit 1
fi

#Is there a directory called chef-$1 already
if [ -e $REPO/../chef-$1 ]
then
  echo "The Chef repo already has a sibling named chef-$1"
  exit 1
fi

#And GO!
git clone $REPO $REPO/../chef-$1
cd $REPO/../chef-$1
git branch -t master origin/master
git remote rm origin
git tag -l | xargs git tag -d
git filter-branch --tag-name-filter cat --prune-empty --subdirectory-filter site-cookbooks/$1 HEAD
git reset --hard
git for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git update-ref -d
git reflog expire --expire=now --all
git gc --aggressive --prune=now
